AWSTemplateFormatVersion: "2010-09-09"

Description: |
  This stack contains definition of the main VPC and foundational networking on AWS for our project:

  * VPC with IPv6.
  * Internet Gateway.
  * NAT Gateways.
  * Egress-only Internet Gateway.
  * Subnets with proper Route Tables configuration.
  * Basic Security Group.

Parameters:

  Stage:
    Type: String
    Default: DEV
    AllowedValues:
      - DEV
      - PROD
    Description: Environment type.

Resources:

  # VPC configuration.

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC

  SupportForIPv6InVPC:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/IGW

  InternetGatewayAttachmentToVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref VPC

      # FIXME: Tags are not supported here. :(
      # Tags:
      #   - Key: Name
      #     Value: ExampleVPC/VPC/EIGW

  # First Public Subnet with related elements.

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public

  RouteTableForPublicSubnet1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/RouteTableForPublicSubnet1

  RouteTableAssociationForPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet1
      SubnetId: !Ref PublicSubnet1

  DefaultRoute1ForPublicSubnet1:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGatewayAttachmentToVPC
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DefaultRoute2ForPublicSubnet1:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGatewayAttachmentToVPC
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet1
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/PublicSubnet1/EIP1

  NATGatewayInPublicSubnet1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet1ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/PublicSubnet1/NATGateway1

  # Second Public Subnet with related elements.

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public

  RouteTableForPublicSubnet2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/RouteTableForPublicSubnet2

  RouteTableAssociationForPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet2
      SubnetId: !Ref PublicSubnet2

  DefaultRoute1ForPublicSubnet2:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGatewayAttachmentToVPC
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DefaultRoute2ForPublicSubnet2:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGatewayAttachmentToVPC
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet2
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  PublicSubnet2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/PublicSubnet2/EIP1

  NATGatewayInPublicSubnet2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet2ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/PublicSubnet2/NATGateway1

  # First Private Subnet with related elements.

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private

  RouteTableForPrivateSubnet1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/RouteTableForPrivateSubnet1

  RouteTableAssociationForPrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet1
      SubnetId: !Ref PrivateSubnet1

  DefaultRoute1ForPrivateSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayInPublicSubnet1

  DefaultRoute2ForPrivateSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet1
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  # Second Private Subnet with related elements.

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private

  RouteTableForPrivateSubnet2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ExampleVPC/VPC/RouteTableForPrivateSubnet2

  RouteTableAssociationForPrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet2
      SubnetId: !Ref PrivateSubnet2

  DefaultRoute1ForPrivateSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayInPublicSubnet2

  DefaultRoute2ForPrivateSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet2
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  # Security Groups.

  SecurityGroupForOpenSSHFromPublicToPrivate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access to the private subnet from the public one
      GroupName: !Sub "security-group-allowing-ssh-access-from-private-subnets-to-public-${Stage}"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
        - CidrIpv6: ::/0
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: 8
          ToPort: 8
        - CidrIpv6: ::/0
          IpProtocol: icmp
          FromPort: 8
          ToPort: 8
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIpv6: ::/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIpv6: ::/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIpv6: ::/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

Outputs:

  AssociatedCIDRFromIPv6Range:
    Value: !Join
      - ","
      - Fn::GetAtt: [ "VPC", "Ipv6CidrBlocks" ]
    Description: A list of IPv6 CIDR blocks that are associated with the VPC.

  AssociatedCIDRFromIPv4Range:
    Value: !GetAtt VPC.CidrBlock
    Description: A list of IPv4 CIDR blocks that are associated with the VPC.
